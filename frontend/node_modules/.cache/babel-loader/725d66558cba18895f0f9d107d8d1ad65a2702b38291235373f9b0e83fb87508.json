{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitag\\\\Documents\\\\GitHub\\\\proiect-individual-front-end\\\\frontend\\\\src\\\\components\\\\Summary\\\\Summary.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styles from \"./Summary.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getFormattedDate = selectedDate => {\n  if (!selectedDate) return \"N/A\"; // ✅ Evită eroarea dacă selectedDate este null/undefined\n\n  let dateObj;\n\n  // ✅ Verificăm dacă este deja un obiect Date sau trebuie convertit\n  if (selectedDate instanceof Date && !isNaN(selectedDate)) {\n    dateObj = selectedDate;\n  } else {\n    dateObj = new Date(selectedDate);\n  }\n\n  // ✅ Evităm eroarea dacă data nu este validă\n  if (isNaN(dateObj)) {\n    console.error(\"Invalid date:\", selectedDate);\n    return \"N/A\";\n  }\n  return dateObj.toISOString().split(\"T\")[0]; // ✅ Format YYYY-MM-DD\n};\nconst Summary = ({\n  selectedDate\n}) => {\n  _s();\n  // ✅ Dacă nu există o dată validă, folosim data de azi\n  const dateToUse = selectedDate ? new Date(selectedDate) : new Date();\n  const formattedDate = dateObject.toLocaleDateString(\"ro-RO\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\"\n  });\n  const dailyCalories = useSelector(state => state.calories.dailyCalories);\n  const consumedFoods = useSelector(state => state.calories.consumedFoods[formattedDate] || []);\n  const consumedCalories = consumedFoods.reduce((total, food) => total + food.calories, 0);\n  const remainingCalories = dailyCalories - consumedCalories;\n  const percentageOfDailyIntake = dailyCalories > 0 ? (consumedCalories / dailyCalories * 100).toFixed(1) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.summaryContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.summaryTitle,\n      children: [\"Summary for \", formattedDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.summaryList,\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), \" \", remainingCalories, \" kcal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Consumed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), \" \", consumedCalories, \" kcal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Daily Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), \" \", dailyCalories, \" kcal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"% of normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), \" \", percentageOfDailyIntake, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Summary, \"DzdCAFO7zScKJO+FzKZ57Cdmjsw=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Summary;\nexport default Summary;\nvar _c;\n$RefreshReg$(_c, \"Summary\");","map":{"version":3,"names":["React","useSelector","styles","jsxDEV","_jsxDEV","getFormattedDate","selectedDate","dateObj","Date","isNaN","console","error","toISOString","split","Summary","_s","dateToUse","formattedDate","dateObject","toLocaleDateString","day","month","year","dailyCalories","state","calories","consumedFoods","consumedCalories","reduce","total","food","remainingCalories","percentageOfDailyIntake","toFixed","className","summaryContainer","children","summaryTitle","fileName","_jsxFileName","lineNumber","columnNumber","summaryList","_c","$RefreshReg$"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/components/Summary/Summary.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styles from \"./Summary.module.css\";\r\n\r\nconst getFormattedDate = (selectedDate) => {\r\n    if (!selectedDate) return \"N/A\"; // ✅ Evită eroarea dacă selectedDate este null/undefined\r\n\r\n    let dateObj;\r\n\r\n    // ✅ Verificăm dacă este deja un obiect Date sau trebuie convertit\r\n    if (selectedDate instanceof Date && !isNaN(selectedDate)) {\r\n        dateObj = selectedDate;\r\n    } else {\r\n        dateObj = new Date(selectedDate);\r\n    }\r\n\r\n    // ✅ Evităm eroarea dacă data nu este validă\r\n    if (isNaN(dateObj)) {\r\n        console.error(\"Invalid date:\", selectedDate);\r\n        return \"N/A\";\r\n    }\r\n\r\n    return dateObj.toISOString().split(\"T\")[0]; // ✅ Format YYYY-MM-DD\r\n};\r\n\r\n\r\nconst Summary = ({ selectedDate }) => {\r\n    // ✅ Dacă nu există o dată validă, folosim data de azi\r\n    const dateToUse = selectedDate ? new Date(selectedDate) : new Date();\r\n\r\n    const formattedDate = dateObject.toLocaleDateString(\"ro-RO\", {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n    });\r\n\r\n    const dailyCalories = useSelector((state) => state.calories.dailyCalories);\r\n    const consumedFoods = useSelector((state) => state.calories.consumedFoods[formattedDate] || []);\r\n\r\n    const consumedCalories = consumedFoods.reduce((total, food) => total + food.calories, 0);\r\n    const remainingCalories = dailyCalories - consumedCalories;\r\n    const percentageOfDailyIntake = dailyCalories > 0 ? ((consumedCalories / dailyCalories) * 100).toFixed(1) : 0;\r\n\r\n    return (\r\n        <div className={styles.summaryContainer}>\r\n            <h3 className={styles.summaryTitle}>Summary for {formattedDate}</h3>\r\n            <ul className={styles.summaryList}>\r\n                <li><span>Left</span> {remainingCalories} kcal</li>\r\n                <li><span>Consumed</span> {consumedCalories} kcal</li>\r\n                <li><span>Daily Rate</span> {dailyCalories} kcal</li>\r\n                <li><span>% of normal</span> {percentageOfDailyIntake}%</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}