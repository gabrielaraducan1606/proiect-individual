{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCalories: 0,\n  consumedCalories: 0,\n  consumedFoods: {} // ✅ Store foods by date\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    // ✅ Set daily calorie intake\n    setDailyCalories: (state, action) => {\n      state.dailyCalories = action.payload;\n    },\n    // ✅ Add consumed food for a specific date\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n      const formattedDate = date.toISOString().split(\"T\")[0]; // Format date to YYYY-MM-DD\n\n      // ✅ Ensure date exists in state\n      if (!state.consumedFoods[formattedDate]) {\n        state.consumedFoods[formattedDate] = [];\n      }\n\n      // ✅ Add food to specific date\n      state.consumedFoods[formattedDate].push({\n        name,\n        weight,\n        calories\n      });\n\n      // ✅ Recalculate total consumed calories\n      state.consumedCalories = Object.values(state.consumedFoods).flat().reduce((total, food) => total + food.calories, 0);\n    },\n    // ✅ Remove consumed food by date & index\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n      if (state.consumedFoods[date]) {\n        state.consumedFoods[date].splice(index, 1);\n        if (state.consumedFoods[date].length === 0) {\n          delete state.consumedFoods[date];\n        }\n      }\n    }\n  }\n});\n\n// ✅ Export actions\nexport const {\n  setDailyCalories,\n  addConsumedFood,\n  removeConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCalories","consumedCalories","consumedFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","payload","addConsumedFood","date","weight","calories","formattedDate","toISOString","split","push","Object","values","flat","reduce","total","food","removeConsumedFood","index","splice","length","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCalories: 0, \r\n    consumedCalories: 0,\r\n    consumedFoods: {}, // ✅ Store foods by date\r\n};\r\n\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        // ✅ Set daily calorie intake\r\n        setDailyCalories: (state, action) => {\r\n            state.dailyCalories = action.payload;\r\n        },\r\n\r\n        // ✅ Add consumed food for a specific date\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            const formattedDate = date.toISOString().split(\"T\")[0]; // Format date to YYYY-MM-DD\r\n        \r\n            // ✅ Ensure date exists in state\r\n            if (!state.consumedFoods[formattedDate]) {\r\n                state.consumedFoods[formattedDate] = [];\r\n            }\r\n        \r\n            // ✅ Add food to specific date\r\n            state.consumedFoods[formattedDate].push({ name, weight, calories });\r\n        \r\n            // ✅ Recalculate total consumed calories\r\n            state.consumedCalories = Object.values(state.consumedFoods)\r\n                .flat()\r\n                .reduce((total, food) => total + food.calories, 0);\r\n        },\r\n        \r\n\r\n        // ✅ Remove consumed food by date & index\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n            if (state.consumedFoods[date]) {\r\n                state.consumedFoods[date].splice(index, 1);\r\n                if (state.consumedFoods[date].length === 0) {\r\n                    delete state.consumedFoods[date];\r\n                }\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\n// ✅ Export actions\r\nexport const { setDailyCalories, addConsumedFood, removeConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,CAAC;EAChBC,gBAAgB,EAAE,CAAC;EACnBC,aAAa,EAAE,CAAC,CAAC,CAAE;AACvB,CAAC;AAGD,MAAMC,aAAa,GAAGL,WAAW,CAAC;EAC9BM,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE;IACN;IACAC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACC,OAAO;IACxC,CAAC;IAED;IACAC,eAAe,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEG,IAAI;QAAEP,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,GAAGL,MAAM,CAACC,OAAO;MACvD,MAAMK,aAAa,GAAGH,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAExD;MACA,IAAI,CAACT,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,EAAE;QACrCP,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,GAAG,EAAE;MAC3C;;MAEA;MACAP,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,CAACG,IAAI,CAAC;QAAEb,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,CAAC;;MAEnE;MACAN,KAAK,CAACN,gBAAgB,GAAGiB,MAAM,CAACC,MAAM,CAACZ,KAAK,CAACL,aAAa,CAAC,CACtDkB,IAAI,CAAC,CAAC,CACNC,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACV,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;IAGD;IACAW,kBAAkB,EAAEA,CAACjB,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEG,IAAI;QAAEc;MAAM,CAAC,GAAGjB,MAAM,CAACC,OAAO;MACtC,IAAIF,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAC3BJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACe,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;QAC1C,IAAIlB,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACgB,MAAM,KAAK,CAAC,EAAE;UACxC,OAAOpB,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC;QACpC;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEL,gBAAgB;EAAEI,eAAe;EAAEc;AAAmB,CAAC,GAAGrB,aAAa,CAACyB,OAAO;AAC9F,eAAezB,aAAa,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}