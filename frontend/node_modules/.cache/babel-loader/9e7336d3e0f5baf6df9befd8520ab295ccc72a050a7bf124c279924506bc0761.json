{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCalories: 0,\n  consumedFoods: {} // âœ… Store foods per date { \"YYYY-MM-DD\": [{ food item }] }\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    // âœ… SetÄƒm caloriile zilnice\n    setDailyCalories: (state, action) => {\n      state.dailyCalories = action.payload;\n    },\n    // âœ… AdÄƒugÄƒm un produs consumat pe baza datei selectate\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n\n      // ðŸ”¥ Convertim data Ã®n formatul standard YYYY-MM-DD\n      const formattedDate = new Date(date).toISOString().split(\"T\")[0];\n\n      // ðŸ”¥ DacÄƒ nu existÄƒ Ã®ncÄƒ intrÄƒri pentru acea zi, iniÈ›ializÄƒm array-ul\n      if (!state.consumedFoods[formattedDate]) {\n        state.consumedFoods[formattedDate] = [];\n      }\n      state.consumedFoods[formattedDate].push({\n        name,\n        weight,\n        calories\n      });\n    },\n    // âœ… EliminÄƒm un produs consumat pentru ziua selectatÄƒ\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n      const formattedDate = new Date(date).toISOString().split(\"T\")[0];\n      if (state.consumedFoods[formattedDate]) {\n        const updatedFoods = [...state.consumedFoods[formattedDate]];\n        updatedFoods.splice(index, 1); // EliminÄƒm itemul la indexul specificat\n\n        // ðŸ”¥ DacÄƒ mai existÄƒ alimente Ã®n acea zi, actualizÄƒm, altfel È™tergem ziua\n        if (updatedFoods.length > 0) {\n          state.consumedFoods[formattedDate] = updatedFoods;\n        } else {\n          delete state.consumedFoods[formattedDate]; // EliminÄƒm ziua dacÄƒ e goalÄƒ\n        }\n      }\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  addConsumedFood,\n  removeConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCalories","consumedFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","payload","addConsumedFood","date","weight","calories","formattedDate","Date","toISOString","split","push","removeConsumedFood","index","updatedFoods","splice","length","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCalories: 0,\r\n    consumedFoods: {}, // âœ… Store foods per date { \"YYYY-MM-DD\": [{ food item }] }\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        // âœ… SetÄƒm caloriile zilnice\r\n        setDailyCalories: (state, action) => {\r\n            state.dailyCalories = action.payload;\r\n        },\r\n\r\n        // âœ… AdÄƒugÄƒm un produs consumat pe baza datei selectate\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            \r\n            // ðŸ”¥ Convertim data Ã®n formatul standard YYYY-MM-DD\r\n            const formattedDate = new Date(date).toISOString().split(\"T\")[0];\r\n\r\n            // ðŸ”¥ DacÄƒ nu existÄƒ Ã®ncÄƒ intrÄƒri pentru acea zi, iniÈ›ializÄƒm array-ul\r\n            if (!state.consumedFoods[formattedDate]) {\r\n                state.consumedFoods[formattedDate] = [];\r\n            }\r\n\r\n            state.consumedFoods[formattedDate].push({ name, weight, calories });\r\n        },\r\n\r\n        // âœ… EliminÄƒm un produs consumat pentru ziua selectatÄƒ\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n            const formattedDate = new Date(date).toISOString().split(\"T\")[0];\r\n\r\n            if (state.consumedFoods[formattedDate]) {\r\n                const updatedFoods = [...state.consumedFoods[formattedDate]];\r\n                updatedFoods.splice(index, 1); // EliminÄƒm itemul la indexul specificat\r\n\r\n                // ðŸ”¥ DacÄƒ mai existÄƒ alimente Ã®n acea zi, actualizÄƒm, altfel È™tergem ziua\r\n                if (updatedFoods.length > 0) {\r\n                    state.consumedFoods[formattedDate] = updatedFoods;\r\n                } else {\r\n                    delete state.consumedFoods[formattedDate]; // EliminÄƒm ziua dacÄƒ e goalÄƒ\r\n                }\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, addConsumedFood, removeConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,CAAC;EAChBC,aAAa,EAAE,CAAC,CAAC,CAAE;AACvB,CAAC;AAED,MAAMC,aAAa,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACN;IACAC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACN,aAAa,GAAGO,MAAM,CAACC,OAAO;IACxC,CAAC;IAED;IACAC,eAAe,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEG,IAAI;QAAEP,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,GAAGL,MAAM,CAACC,OAAO;;MAEvD;MACA,MAAMK,aAAa,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAAC,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEhE;MACA,IAAI,CAACV,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,EAAE;QACrCP,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,GAAG,EAAE;MAC3C;MAEAP,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,CAACI,IAAI,CAAC;QAAEd,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,CAAC;IACvE,CAAC;IAED;IACAM,kBAAkB,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEG,IAAI;QAAES;MAAM,CAAC,GAAGZ,MAAM,CAACC,OAAO;MACtC,MAAMK,aAAa,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAAC,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEhE,IAAIV,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,EAAE;QACpC,MAAMO,YAAY,GAAG,CAAC,GAAGd,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,CAAC;QAC5DO,YAAY,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;;QAE/B;QACA,IAAIC,YAAY,CAACE,MAAM,GAAG,CAAC,EAAE;UACzBhB,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,GAAGO,YAAY;QACrD,CAAC,MAAM;UACH,OAAOd,KAAK,CAACL,aAAa,CAACY,aAAa,CAAC,CAAC,CAAC;QAC/C;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,gBAAgB;EAAEI,eAAe;EAAES;AAAmB,CAAC,GAAGhB,aAAa,CAACqB,OAAO;AAC9F,eAAerB,aAAa,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}