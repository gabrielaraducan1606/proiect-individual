{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCalories: 0,\n  consumedCalories: 0,\n  consumedFoods: {} // ✅ Store foods per date { \"2024-03-13\": [{ food item }] }\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    // ✅ Set daily calories\n    setDailyCalories: (state, action) => {\n      state.dailyCalories = action.payload;\n    },\n    // ✅ Add food item for a specific date\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n\n      // ✅ Ensure the date has an array\n      if (!state.consumedFoods[date]) {\n        state.consumedFoods[date] = [];\n      }\n\n      // ✅ Add food without mutating state\n      state.consumedFoods[date] = [...state.consumedFoods[date], {\n        name,\n        weight,\n        calories\n      }];\n\n      // ✅ Update total consumed calories\n      state.consumedCalories = Object.values(state.consumedFoods).flat().reduce((total, food) => total + food.calories, 0);\n    },\n    // ✅ Remove food item for a specific date\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n      if (state.consumedFoods[date]) {\n        state.consumedFoods[date] = state.consumedFoods[date].filter((_, i) => i !== index);\n\n        // ✅ Recalculate total calories\n        state.consumedCalories = Object.values(state.consumedFoods).flat().reduce((total, food) => total + food.calories, 0);\n      }\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  addConsumedFood,\n  removeConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCalories","consumedCalories","consumedFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","payload","addConsumedFood","date","weight","calories","Object","values","flat","reduce","total","food","removeConsumedFood","index","filter","_","i","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCalories: 0,\r\n    consumedCalories: 0,\r\n    consumedFoods: {}, // ✅ Store foods per date { \"2024-03-13\": [{ food item }] }\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        // ✅ Set daily calories\r\n        setDailyCalories: (state, action) => {\r\n            state.dailyCalories = action.payload;\r\n        },\r\n\r\n        // ✅ Add food item for a specific date\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            \r\n            // ✅ Ensure the date has an array\r\n            if (!state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = [];\r\n            }\r\n\r\n            // ✅ Add food without mutating state\r\n            state.consumedFoods[date] = [...state.consumedFoods[date], { name, weight, calories }];\r\n            \r\n            // ✅ Update total consumed calories\r\n            state.consumedCalories = Object.values(state.consumedFoods).flat().reduce((total, food) => total + food.calories, 0);\r\n        },\r\n\r\n        // ✅ Remove food item for a specific date\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n\r\n            if (state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = state.consumedFoods[date].filter((_, i) => i !== index);\r\n                \r\n                // ✅ Recalculate total calories\r\n                state.consumedCalories = Object.values(state.consumedFoods).flat().reduce((total, food) => total + food.calories, 0);\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, addConsumedFood, removeConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,CAAC;EAChBC,gBAAgB,EAAE,CAAC;EACnBC,aAAa,EAAE,CAAC,CAAC,CAAE;AACvB,CAAC;AAED,MAAMC,aAAa,GAAGL,WAAW,CAAC;EAC9BM,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE;IACN;IACAC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACC,OAAO;IACxC,CAAC;IAED;IACAC,eAAe,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEG,IAAI;QAAEP,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,GAAGL,MAAM,CAACC,OAAO;;MAEvD;MACA,IAAI,CAACF,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAC5BJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,GAAG,EAAE;MAClC;;MAEA;MACAJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAAEP,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,CAAC;;MAEtF;MACAN,KAAK,CAACN,gBAAgB,GAAGa,MAAM,CAACC,MAAM,CAACR,KAAK,CAACL,aAAa,CAAC,CAACc,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACN,QAAQ,EAAE,CAAC,CAAC;IACxH,CAAC;IAED;IACAO,kBAAkB,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEG,IAAI;QAAEU;MAAM,CAAC,GAAGb,MAAM,CAACC,OAAO;MAEtC,IAAIF,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAC3BJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,GAAGJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACW,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK,CAAC;;QAEnF;QACAd,KAAK,CAACN,gBAAgB,GAAGa,MAAM,CAACC,MAAM,CAACR,KAAK,CAACL,aAAa,CAAC,CAACc,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACN,QAAQ,EAAE,CAAC,CAAC;MACxH;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP,gBAAgB;EAAEI,eAAe;EAAEU;AAAmB,CAAC,GAAGjB,aAAa,CAACsB,OAAO;AAC9F,eAAetB,aAAa,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}