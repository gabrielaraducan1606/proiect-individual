{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCaloriesByDate: {},\n  consumedFoods: {},\n  selectedDate: new Date().toISOString().split(\"T\")[0],\n  forbiddenFoods: [] // ðŸ”¥ Lista produselor nerecomandate\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    setDailyCalories: (state, action) => {\n      const {\n        date,\n        calories\n      } = action.payload;\n      state.dailyCaloriesByDate[date] = calories;\n    },\n    setSelectedDate: (state, action) => {\n      const newDate = new Date(action.payload);\n      if (!isNaN(newDate.getTime())) {\n        state.selectedDate = newDate.toISOString().split(\"T\")[0];\n      }\n    },\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n      if (!state.consumedFoods[date]) {\n        state.consumedFoods[date] = [];\n      }\n      state.consumedFoods[date].push({\n        name,\n        weight,\n        calories\n      });\n    },\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n      if (state.consumedFoods[date]) {\n        state.consumedFoods[date].splice(index, 1);\n        if (state.consumedFoods[date].length === 0) {\n          delete state.consumedFoods[date];\n        }\n      }\n    },\n    setForbiddenFoods: (state, action) => {\n      state.forbiddenFoods = action.payload; // âœ… SeteazÄƒ lista produselor nerecomandate\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  setSelectedDate,\n  addConsumedFood,\n  removeConsumedFood,\n  setForbiddenFoods\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCaloriesByDate","consumedFoods","selectedDate","Date","toISOString","split","forbiddenFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","date","calories","payload","setSelectedDate","newDate","isNaN","getTime","addConsumedFood","weight","push","removeConsumedFood","index","splice","length","setForbiddenFoods","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCaloriesByDate: {},\r\n    consumedFoods: {},\r\n    selectedDate: new Date().toISOString().split(\"T\")[0],\r\n    forbiddenFoods: [], // ðŸ”¥ Lista produselor nerecomandate\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        setDailyCalories: (state, action) => {\r\n            const { date, calories } = action.payload;\r\n            state.dailyCaloriesByDate[date] = calories;\r\n        },\r\n        setSelectedDate: (state, action) => {\r\n            const newDate = new Date(action.payload);\r\n            if (!isNaN(newDate.getTime())) {\r\n                state.selectedDate = newDate.toISOString().split(\"T\")[0];\r\n            }\r\n        },\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            if (!state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = [];\r\n            }\r\n            state.consumedFoods[date].push({ name, weight, calories });\r\n        },\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n            if (state.consumedFoods[date]) {\r\n                state.consumedFoods[date].splice(index, 1);\r\n                if (state.consumedFoods[date].length === 0) {\r\n                    delete state.consumedFoods[date];\r\n                }\r\n            }\r\n        },\r\n        setForbiddenFoods: (state, action) => {\r\n            state.forbiddenFoods = action.payload; // âœ… SeteazÄƒ lista produselor nerecomandate\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, setSelectedDate, addConsumedFood, removeConsumedFood, setForbiddenFoods } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,aAAa,EAAE,CAAC,CAAC;EACjBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpDC,cAAc,EAAE,EAAE,CAAE;AACxB,CAAC;AAED,MAAMC,aAAa,GAAGT,WAAW,CAAC;EAC9BU,IAAI,EAAE,UAAU;EAChBT,YAAY;EACZU,QAAQ,EAAE;IACNC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEC,IAAI;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MACzCJ,KAAK,CAACX,mBAAmB,CAACa,IAAI,CAAC,GAAGC,QAAQ;IAC9C,CAAC;IACDE,eAAe,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAMK,OAAO,GAAG,IAAId,IAAI,CAACS,MAAM,CAACG,OAAO,CAAC;MACxC,IAAI,CAACG,KAAK,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QAC3BR,KAAK,CAACT,YAAY,GAAGe,OAAO,CAACb,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5D;IACJ,CAAC;IACDe,eAAe,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEC,IAAI;QAAEL,IAAI;QAAEa,MAAM;QAAEP;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MACvD,IAAI,CAACJ,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,EAAE;QAC5BF,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,GAAG,EAAE;MAClC;MACAF,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,CAACS,IAAI,CAAC;QAAEd,IAAI;QAAEa,MAAM;QAAEP;MAAS,CAAC,CAAC;IAC9D,CAAC;IACDS,kBAAkB,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEC,IAAI;QAAEW;MAAM,CAAC,GAAGZ,MAAM,CAACG,OAAO;MACtC,IAAIJ,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,EAAE;QAC3BF,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,CAACY,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;QAC1C,IAAIb,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC,CAACa,MAAM,KAAK,CAAC,EAAE;UACxC,OAAOf,KAAK,CAACV,aAAa,CAACY,IAAI,CAAC;QACpC;MACJ;IACJ,CAAC;IACDc,iBAAiB,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACL,cAAc,GAAGM,MAAM,CAACG,OAAO,CAAC,CAAC;IAC3C;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,gBAAgB;EAAEM,eAAe;EAAEI,eAAe;EAAEG,kBAAkB;EAAEI;AAAkB,CAAC,GAAGpB,aAAa,CAACqB,OAAO;AAClI,eAAerB,aAAa,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}