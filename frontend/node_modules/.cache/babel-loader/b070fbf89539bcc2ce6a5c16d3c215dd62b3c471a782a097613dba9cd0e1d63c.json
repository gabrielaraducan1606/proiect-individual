{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCalories: 0,\n  consumedFoods: {} // ✅ Store foods by date: { \"10.03.2025\": [{ food1 }, { food2 }] }\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    setDailyCalories: (state, action) => {\n      state.dailyCalories = action.payload;\n    },\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n\n      // ✅ If no foods exist for that date, initialize an empty array\n      if (!state.consumedFoods[date]) {\n        state.consumedFoods[date] = [];\n      }\n\n      // ✅ Use push() to correctly modify the array\n      state.consumedFoods[date].push({\n        name,\n        weight,\n        calories\n      });\n    },\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n\n      // ✅ Ensure the date exists before modifying\n      if (state.consumedFoods[date]) {\n        state.consumedFoods[date].splice(index, 1);\n\n        // ✅ Remove the key if the array becomes empty\n        if (state.consumedFoods[date].length === 0) {\n          delete state.consumedFoods[date];\n        }\n      }\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  addConsumedFood,\n  removeConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCalories","consumedFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","payload","addConsumedFood","date","weight","calories","push","removeConsumedFood","index","splice","length","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCalories: 0,\r\n    consumedFoods: {}, // ✅ Store foods by date: { \"10.03.2025\": [{ food1 }, { food2 }] }\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        setDailyCalories: (state, action) => {\r\n            state.dailyCalories = action.payload;\r\n        },\r\n\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n\r\n            // ✅ If no foods exist for that date, initialize an empty array\r\n            if (!state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = [];\r\n            }\r\n\r\n            // ✅ Use push() to correctly modify the array\r\n            state.consumedFoods[date].push({ name, weight, calories });\r\n        },\r\n\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n\r\n            // ✅ Ensure the date exists before modifying\r\n            if (state.consumedFoods[date]) {\r\n                state.consumedFoods[date].splice(index, 1);\r\n\r\n                // ✅ Remove the key if the array becomes empty\r\n                if (state.consumedFoods[date].length === 0) {\r\n                    delete state.consumedFoods[date];\r\n                }\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, addConsumedFood, removeConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,CAAC;EAChBC,aAAa,EAAE,CAAC,CAAC,CAAE;AACvB,CAAC;AAED,MAAMC,aAAa,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACNC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACN,aAAa,GAAGO,MAAM,CAACC,OAAO;IACxC,CAAC;IAEDC,eAAe,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEG,IAAI;QAAEP,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,GAAGL,MAAM,CAACC,OAAO;;MAEvD;MACA,IAAI,CAACF,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAC5BJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,GAAG,EAAE;MAClC;;MAEA;MACAJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACG,IAAI,CAAC;QAAEV,IAAI;QAAEQ,MAAM;QAAEC;MAAS,CAAC,CAAC;IAC9D,CAAC;IAEDE,kBAAkB,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEG,IAAI;QAAEK;MAAM,CAAC,GAAGR,MAAM,CAACC,OAAO;;MAEtC;MACA,IAAIF,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,EAAE;QAC3BJ,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACM,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;QAE1C;QACA,IAAIT,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;UACxC,OAAOX,KAAK,CAACL,aAAa,CAACS,IAAI,CAAC;QACpC;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,gBAAgB;EAAEI,eAAe;EAAEK;AAAmB,CAAC,GAAGZ,aAAa,CAACgB,OAAO;AAC9F,eAAehB,aAAa,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}