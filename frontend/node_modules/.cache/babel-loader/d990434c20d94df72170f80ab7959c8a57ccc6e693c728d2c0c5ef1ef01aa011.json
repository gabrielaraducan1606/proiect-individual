{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCaloriesByDate: {},\n  // Stocăm caloriile per dată\n  consumedFoods: {}\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    // ✅ Actualizează caloriile zilnice doar dacă e nevoie\n    setDailyCalories: (state, action) => {\n      const {\n        date,\n        calories\n      } = action.payload;\n      if (state.dailyCaloriesByDate[date] !== calories) {\n        console.log(\"✅ Dispatching setDailyCalories for\", date, \"Calories:\", calories);\n        state.dailyCaloriesByDate[date] = calories;\n      }\n    },\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n      if (!state.consumedFoods[date]) {\n        state.consumedFoods[date] = [];\n      }\n      state.consumedFoods[date].push({\n        name,\n        weight,\n        calories\n      });\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  addConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCaloriesByDate","consumedFoods","caloriesSlice","name","reducers","setDailyCalories","state","action","date","calories","payload","console","log","addConsumedFood","weight","push","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCaloriesByDate: {}, // Stocăm caloriile per dată\r\n    consumedFoods: {},\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        // ✅ Actualizează caloriile zilnice doar dacă e nevoie\r\n        setDailyCalories: (state, action) => {\r\n            const { date, calories } = action.payload;\r\n\r\n            if (state.dailyCaloriesByDate[date] !== calories) {\r\n                console.log(\"✅ Dispatching setDailyCalories for\", date, \"Calories:\", calories);\r\n                state.dailyCaloriesByDate[date] = calories;\r\n            }\r\n        },\r\n\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            if (!state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = [];\r\n            }\r\n            state.consumedFoods[date].push({ name, weight, calories });\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, addConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,mBAAmB,EAAE,CAAC,CAAC;EAAE;EACzBC,aAAa,EAAE,CAAC;AACpB,CAAC;AAED,MAAMC,aAAa,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACN;IACAC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEC,IAAI;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MAEzC,IAAIJ,KAAK,CAACN,mBAAmB,CAACQ,IAAI,CAAC,KAAKC,QAAQ,EAAE;QAC9CE,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,IAAI,EAAE,WAAW,EAAEC,QAAQ,CAAC;QAC9EH,KAAK,CAACN,mBAAmB,CAACQ,IAAI,CAAC,GAAGC,QAAQ;MAC9C;IACJ,CAAC;IAEDI,eAAe,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEC,IAAI;QAAEL,IAAI;QAAEW,MAAM;QAAEL;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MACvD,IAAI,CAACJ,KAAK,CAACL,aAAa,CAACO,IAAI,CAAC,EAAE;QAC5BF,KAAK,CAACL,aAAa,CAACO,IAAI,CAAC,GAAG,EAAE;MAClC;MACAF,KAAK,CAACL,aAAa,CAACO,IAAI,CAAC,CAACO,IAAI,CAAC;QAAEZ,IAAI;QAAEW,MAAM;QAAEL;MAAS,CAAC,CAAC;IAC9D;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ,gBAAgB;EAAEQ;AAAgB,CAAC,GAAGX,aAAa,CAACc,OAAO;AAC1E,eAAed,aAAa,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}