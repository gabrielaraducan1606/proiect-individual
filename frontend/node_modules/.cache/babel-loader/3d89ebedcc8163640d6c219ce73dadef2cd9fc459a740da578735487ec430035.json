{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  dailyCaloriesByDate: {},\n  // ðŸ”¥ Stores daily calories per date { \"YYYY-MM-DD\": 1800 }\n  consumedFoods: {},\n  // ðŸ”¥ Stores consumed foods per date { \"YYYY-MM-DD\": [{ food item }] }\n  selectedDate: new Date().toISOString().split(\"T\")[0] // ðŸ”¥ Ensure valid default date\n};\nconst caloriesSlice = createSlice({\n  name: \"calories\",\n  initialState,\n  reducers: {\n    setDailyCalories: (state, action) => {\n      const {\n        date,\n        calories\n      } = action.payload;\n      state.dailyCaloriesByDate[date] = calories;\n    },\n    setSelectedDate: (state, action) => {\n      const newDate = new Date(action.payload);\n      if (!isNaN(newDate.getTime())) {\n        state.selectedDate = newDate.toISOString().split(\"T\")[0];\n      } else {\n        console.error(\"ðŸš¨ Invalid date passed to Redux. Resetting to today.\");\n        state.selectedDate = new Date().toISOString().split(\"T\")[0]; // Reset if invalid\n      }\n    },\n    addConsumedFood: (state, action) => {\n      const {\n        date,\n        name,\n        weight,\n        calories\n      } = action.payload;\n      if (!state.consumedFoods[date]) {\n        state.consumedFoods[date] = [];\n      }\n      state.consumedFoods[date].push({\n        name,\n        weight,\n        calories\n      });\n    },\n    // âœ… Add `removeConsumedFood` function\n    removeConsumedFood: (state, action) => {\n      const {\n        date,\n        index\n      } = action.payload;\n      if (state.consumedFoods[date]) {\n        state.consumedFoods[date].splice(index, 1);\n\n        // Remove the date key if no more food entries exist\n        if (state.consumedFoods[date].length === 0) {\n          delete state.consumedFoods[date];\n        }\n      }\n    }\n  }\n});\nexport const {\n  setDailyCalories,\n  setSelectedDate,\n  addConsumedFood,\n  removeConsumedFood\n} = caloriesSlice.actions;\nexport default caloriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","dailyCaloriesByDate","consumedFoods","selectedDate","Date","toISOString","split","caloriesSlice","name","reducers","setDailyCalories","state","action","date","calories","payload","setSelectedDate","newDate","isNaN","getTime","console","error","addConsumedFood","weight","push","removeConsumedFood","index","splice","length","actions","reducer"],"sources":["C:/Users/nitag/Documents/GitHub/proiect-individual-front-end/frontend/src/redux/caloriesSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    dailyCaloriesByDate: {}, // ðŸ”¥ Stores daily calories per date { \"YYYY-MM-DD\": 1800 }\r\n    consumedFoods: {}, // ðŸ”¥ Stores consumed foods per date { \"YYYY-MM-DD\": [{ food item }] }\r\n    selectedDate: new Date().toISOString().split(\"T\")[0], // ðŸ”¥ Ensure valid default date\r\n};\r\n\r\nconst caloriesSlice = createSlice({\r\n    name: \"calories\",\r\n    initialState,\r\n    reducers: {\r\n        setDailyCalories: (state, action) => {\r\n            const { date, calories } = action.payload;\r\n            state.dailyCaloriesByDate[date] = calories;\r\n        },\r\n\r\n        setSelectedDate: (state, action) => {\r\n            const newDate = new Date(action.payload);\r\n            if (!isNaN(newDate.getTime())) {\r\n                state.selectedDate = newDate.toISOString().split(\"T\")[0];\r\n            } else {\r\n                console.error(\"ðŸš¨ Invalid date passed to Redux. Resetting to today.\");\r\n                state.selectedDate = new Date().toISOString().split(\"T\")[0]; // Reset if invalid\r\n            }\r\n        },\r\n\r\n        addConsumedFood: (state, action) => {\r\n            const { date, name, weight, calories } = action.payload;\r\n            if (!state.consumedFoods[date]) {\r\n                state.consumedFoods[date] = [];\r\n            }\r\n            state.consumedFoods[date].push({ name, weight, calories });\r\n        },\r\n\r\n        // âœ… Add `removeConsumedFood` function\r\n        removeConsumedFood: (state, action) => {\r\n            const { date, index } = action.payload;\r\n            if (state.consumedFoods[date]) {\r\n                state.consumedFoods[date].splice(index, 1);\r\n\r\n                // Remove the date key if no more food entries exist\r\n                if (state.consumedFoods[date].length === 0) {\r\n                    delete state.consumedFoods[date];\r\n                }\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setDailyCalories, setSelectedDate, addConsumedFood, removeConsumedFood } = caloriesSlice.actions;\r\nexport default caloriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,mBAAmB,EAAE,CAAC,CAAC;EAAE;EACzBC,aAAa,EAAE,CAAC,CAAC;EAAE;EACnBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE;AAC1D,CAAC;AAED,MAAMC,aAAa,GAAGR,WAAW,CAAC;EAC9BS,IAAI,EAAE,UAAU;EAChBR,YAAY;EACZS,QAAQ,EAAE;IACNC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEC,IAAI;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MACzCJ,KAAK,CAACV,mBAAmB,CAACY,IAAI,CAAC,GAAGC,QAAQ;IAC9C,CAAC;IAEDE,eAAe,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAMK,OAAO,GAAG,IAAIb,IAAI,CAACQ,MAAM,CAACG,OAAO,CAAC;MACxC,IAAI,CAACG,KAAK,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QAC3BR,KAAK,CAACR,YAAY,GAAGc,OAAO,CAACZ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5D,CAAC,MAAM;QACHc,OAAO,CAACC,KAAK,CAAC,sDAAsD,CAAC;QACrEV,KAAK,CAACR,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjE;IACJ,CAAC;IAEDgB,eAAe,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEC,IAAI;QAAEL,IAAI;QAAEe,MAAM;QAAET;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MACvD,IAAI,CAACJ,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,EAAE;QAC5BF,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,GAAG,EAAE;MAClC;MACAF,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,CAACW,IAAI,CAAC;QAAEhB,IAAI;QAAEe,MAAM;QAAET;MAAS,CAAC,CAAC;IAC9D,CAAC;IAED;IACAW,kBAAkB,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEC,IAAI;QAAEa;MAAM,CAAC,GAAGd,MAAM,CAACG,OAAO;MACtC,IAAIJ,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,EAAE;QAC3BF,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,CAACc,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;QAE1C;QACA,IAAIf,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC,CAACe,MAAM,KAAK,CAAC,EAAE;UACxC,OAAOjB,KAAK,CAACT,aAAa,CAACW,IAAI,CAAC;QACpC;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,gBAAgB;EAAEM,eAAe;EAAEM,eAAe;EAAEG;AAAmB,CAAC,GAAGlB,aAAa,CAACsB,OAAO;AAC/G,eAAetB,aAAa,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}